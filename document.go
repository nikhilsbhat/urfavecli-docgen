package docgen

import (
	"bytes"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/nikhilsbhat/gocd-sdk-go"
	"github.com/sirupsen/logrus"
	"github.com/urfave/cli/v2"
)

const (
	docGenName        = "UrFaveCliDocGen"
	docFilePermission = 0o600
)

// getDocs generates markdown documentation for the commands in app.
// Shamelessly copied code from https://github.com/urfave/cli/issues/340#issuecomment-334389849 with few modification.
func getDocs(app *cli.App, logger *logrus.Logger) string {
	buffer := bytes.Buffer{}

	buffer.WriteString(fmt.Sprintf("# `%s`\n\n", app.Name))
	buffer.WriteString(fmt.Sprintf("%s\n%s - <%s>\n\n", app.Usage, app.Version, app.Authors[0].String()))

	if app.Description != "" {
		buffer.WriteString(app.Description)
		buffer.WriteString("\n\n")
	}

	logger.Info("generating documents for subcommands")
	buffer.WriteString("## Subcommands\n\n")

	for _, command := range app.Commands {
		logger.Infof("generating documents for subcommand '%s'", command.Name)

		buffer.WriteString(fmt.Sprintf("### `%s`\n\n", command.Name))
		if command.Usage != "" {
			logger.Infof("generating documents on usage subcommand '%s'", command.Name)
			buffer.WriteString(command.Usage)
			buffer.WriteString("\n\n")
		}
		if command.Description != "" {
			logger.Infof("generating documents on description of subcommand '%s'", command.Name)
			buffer.WriteString(command.Description)
			buffer.WriteString("\n\n")
		}
		if len(command.Flags) > 0 {
			logger.Infof("generating documents on flags used by subcommand '%s'", command.Name)
			buffer.WriteString("#### Flags\n\n")
			for _, flag := range command.Flags {
				buffer.WriteString(fmt.Sprintf("- `--%s`\n", flag.String()))
			}
			buffer.WriteString("\n\n")
		}
	}

	if len(app.Flags) > 0 {
		logger.Infof("generating documents on global flags of app '%s'", app.Name)
		buffer.WriteString("## Global Flags\n\n")
		for _, flag := range app.Flags {
			buffer.WriteString(fmt.Sprintf("- `--%s`\n", flag.String()))
		}
		buffer.WriteString("\n\n")
	}

	buffer.WriteString("###### Auto generated by nikhilsbhat/urfavecli-docgen on " + time.Now().Format("2-Jan-2006") + "\n")

	return buffer.String()
}

func GenerateDocs(app *cli.App) {
	docsRootPath := "doc"
	docsPath := filepath.Join(docsRootPath, "docs.md")

	logger := logrus.New()
	logger.SetLevel(gocd.GetLoglevel("info"))
	logger.WithField(docGenName, true)
	logger.SetFormatter(&logrus.JSONFormatter{})

	logger.Infof("generating cli documents for '%s'", docGenName)
	logger.Infof("documets would be generated under '%s'", docsPath)

	docString := getDocs(app, logger)

	logger.Infof("documets for cli '%s' was rendered, proceeding to wrtite the same to path '%s'", docGenName, docsPath)

	logger.Infof("creating directory 'doc' to place document files")

	if _, err := os.Stat(docsRootPath); errors.Is(err, os.ErrNotExist) {
		if err = os.Mkdir(docsRootPath, docFilePermission); err != nil {
			logger.Fatalf("creating document directory errored with: '%v'", err)
		}
	}

	logger.Infof("proceeding to write rendered document to file")

	if _, err := os.Stat(docsPath); errors.Is(err, os.ErrNotExist) {
		if err = os.WriteFile(docsPath, []byte(docString), docFilePermission); err != nil {
			logger.Fatalf("writing document to file '%s' errored with: '%v'", docsPath, err)
		}
	} else {
		docFile, err := os.OpenFile(docsPath, os.O_WRONLY, os.ModeAppend) //nolint:nosnakecase
		if err != nil {
			log.Fatalf("reading existing document file '%s' to update it failed", docsPath)
		}

		if _, err := docFile.WriteString(docString); err != nil {
			log.Fatalf("updating document file '%s' with newer information errored with: '%v'", docsPath, err)
		}
	}

	logger.Infof("documents were successfully rendered to '%s'", docsPath)
}
